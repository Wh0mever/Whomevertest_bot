import json
import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from utils.database import load_json, save_json
from utils.logging import setup_logger
from utils.checks import check_spelling, check_post_metrics, analyze_metrics_with_gpt
from utils.notifications import notify_admins
from telethon import TelegramClient
from datetime import datetime, timedelta
import aiohttp
from utils.api import set_bot_getter
import time
from utils.config import CONFIG
import re

# ID —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
SUPER_ADMIN_ID = 1914567632

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open("config.json") as config_file:
    CONFIG = json.load(config_file)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG.update({
    "METRICS_CHECK_DELAY": 86400,  # 24 —á–∞—Å–∞
    "TEXT_CHECK_DELAY": 0  # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
})

bot = Bot(token=CONFIG["API_TOKEN"])
dp = Dispatcher()
dp.bot = bot

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö
channels = load_json("channels.json")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
waiting_for_channel = False
waiting_for_timezone = False
current_channel = None
current_channel_title = None

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ Telethon
client = TelegramClient('bot_session', CONFIG["API_ID"], CONFIG["API_HASH"])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_channels():
    save_json("channels.json", channels)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    try:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")],
                [KeyboardButton(text="üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True,
            persistent=True
        )
        
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    try:
        await message.reply(
            "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
            "- `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "- `/help` - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
            "- `/add_channel` - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "   –ü—Ä–∏–º–µ—Ä—ã:\n"
            "   `/add_channel @channel +05:00`\n"
            "   `/add_channel -100123456789 -02:30`\n"
            "- `/cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            "- `/channels` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "- `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º\n\n"
            "**–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:**\n"
            "Telegram: [t.me/ctrltg](t.me/ctrltg)\n"
            "–°–∞–π—Ç: [whomever.tech](https://whomever.tech)",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

@dp.message(Command("add_channel"))
async def add_channel_command(message: types.Message):
    try:
        global waiting_for_channel
        waiting_for_channel = True
        await message.reply(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.\n"
            "–§–æ—Ä–º–∞—Ç: @username +05:00 –∏–ª–∏ -100123456789 -02:30"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")

@dp.message(Command("channels"))
async def channels_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channels"""
    await handle_my_channels(message)

@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def handle_my_channels(message: types.Message):
    try:
        if not channels:
            await message.reply(
                "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            return

        keyboard = []
        for channel_id, data in channels.items():
            channel_name = data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            keyboard.append([KeyboardButton(text=f"üìå {channel_name}")])
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        await message.reply(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=keyboard,
                resize_keyboard=True
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.message(lambda message: message.text.startswith("üìå "))
async def handle_channel_settings(message: types.Message):
    try:
        channel_title = message.text[2:].strip()  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        channel_id = None
        channel_data = None
        
        for cid, data in channels.items():
            if data.get('title') == channel_title:
                channel_id = cid
                channel_data = data
                break
                
        if not channel_data:
            await message.reply("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        keyboard = [
            [KeyboardButton(text="üïí –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")],
            [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")]
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        channel_link = f"https://t.me/{channel_data.get('username', channel_id[1:])}" if channel_id.startswith('@') else f"https://t.me/c/{str(channel_data['chat_id'])[4:]}"
        
        text = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_title}\n\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {channel_data.get('subscribers', 0):,}\n"
            f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {channel_data.get('timezone', 0):+.2f}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {channel_link}"
        )
        
        await message.reply(
            text,
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def handle_add_channel_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await add_channel_command(message)

@dp.message(lambda message: message.text == "üïí –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
async def change_timezone_handler(message: types.Message):
    try:
        global waiting_for_timezone, current_channel
        waiting_for_timezone = True
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        channel_title = None
        for cid, data in channels.items():
            if data.get('title') == message.text[2:].strip():  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
                current_channel = cid
                channel_title = data.get('title')
                break
                
        if not current_channel:
            await message.reply(
                "–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return
            
        await message.reply(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +05:00 –∏–ª–∏ -02:30",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]],
                resize_keyboard=True
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.message(lambda message: waiting_for_timezone and message.text not in ["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"])
async def process_timezone_change(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    try:
        global waiting_for_timezone, current_channel
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        timezone_str = message.text
        if not re.match(r'^[+-]\d{2}:\d{2}$', timezone_str):
            await message.reply(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +05:00 –∏–ª–∏ -02:30",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]],
                    resize_keyboard=True
                )
            )
            return
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
        sign = -1 if timezone_str[0] == '-' else 1
        hours, minutes = map(int, timezone_str[1:].split(':'))
        timezone = sign * (hours + minutes / 60)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–∞–Ω–∞–ª–∞
        if current_channel and current_channel in channels:
            channels[current_channel]['timezone'] = timezone
            save_channels()
            
            await message.reply(
                f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {timezone_str}",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]],
                    resize_keyboard=True
                )
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            waiting_for_timezone = False
            current_channel = None
        else:
            await message.reply(
                "–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    await handle_stats(message)

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats(message: types.Message):
    try:
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        if not channels:
            stats_text = "–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
        else:
            for chat_id, data in channels.items():
                stats_text += (
                    f"üìå {data.get('title', chat_id)}\n"
                    f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {data.get('subscribers', 0):,}\n"
                    f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data.get('timezone', 0):+.2f}\n\n"
                )
        
        await message.reply(
            stats_text,
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.message(lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")],
                [KeyboardButton(text="üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True
        )
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await help_command(message)

@dp.message(lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
async def handle_delete_channel(message: types.Message):
    try:
        if not channels:
            await message.reply(
                "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        keyboard = []
        
        for channel_id, data in channels.items():
            text += f"üìå {data.get('title', channel_id)}\n"
            text += f"ID: {channel_id}\n\n"
            keyboard.append([KeyboardButton(text=f"‚ùå {channel_id}")])
        
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        await message.reply(
            text,
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.message(lambda message: message.text.startswith("‚ùå "))
async def confirm_delete_channel(message: types.Message):
    try:
        channel_id = message.text[2:]  # –£–±–∏—Ä–∞–µ–º "‚ùå "
        
        if channel_id in channels:
            channel_title = channels[channel_id].get('title', channel_id)
            del channels[channel_id]
            save_channels()
            
            await message.reply(
                f"‚úÖ –ö–∞–Ω–∞–ª {channel_title} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
        else:
            await message.reply(
                "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

async def update_subscribers_count():
    while True:
        try:
            for channel_id, data in channels.items():
                try:
                    if "chat_id" in data:
                        count = await bot.get_chat_member_count(data["chat_id"])
                        channels[channel_id]["subscribers"] = count
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {channel_id}: {count}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            save_channels()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        await asyncio.sleep(CONFIG["UPDATE_INTERVALS"]["SUBSCRIBERS"])

async def main():
    await client.start()
    logger.info("–ö–ª–∏–µ–Ω—Ç Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω.")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.create_task(update_subscribers_count())
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

@dp.message(Command("cancel"))
async def cancel_command(message: types.Message):
    global waiting_for_channel
    if waiting_for_channel:
        waiting_for_channel = False
        await message.reply("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@dp.channel_post()
async def handle_channel_post(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
    try:
        chat_id = str(message.chat.id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ {message.chat.title or chat_id}")
        
        channel_data = None
        for channel_id, data in channels.items():
            if str(data.get('chat_id')) == chat_id:
                channel_data = data
                break
                
        if not channel_data:
            logger.error(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
        if message.text:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            spelling_result = await check_spelling(message.text, CONFIG["OPENAI_API_KEY"])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏–µ GPT
            if spelling_result["decision"] == "/false_no":
                error_message = f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞:\n\n"
                error_message += f"üìå –ö–∞–Ω–∞–ª: {channel_data.get('title', chat_id)}\n"
                error_message += f"üî¢ ID –ø–æ—Å—Ç–∞: {message.message_id}\n"
                error_message += f"üîó –°—Å—ã–ª–∫–∞: https://t.me/c/{str(chat_id)[4:]}/{message.message_id}\n\n"
                error_message += f"üìÑ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{message.text[:200]}{'...' if len(message.text) > 200 else ''}\n\n"
                
                has_serious_issues = False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
                if spelling_result["categories"]["spelling"]:
                    error_message += "üîç –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:\n"
                    spelling_details = spelling_result['details']['spelling_details']
                    if isinstance(spelling_details, list):
                        spelling_details = "\n".join(map(str, spelling_details))
                    for error in (spelling_details.split('\n') if isinstance(spelling_details, str) else spelling_details):
                        if isinstance(error, str) and error.strip():
                            error_message += f"‚Ä¢ {error.strip()}\n"
                    error_message += "\n"
                    has_serious_issues = True
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
                if spelling_result["categories"]["grammar"]:
                    error_message += "üìù –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:\n"
                    grammar_details = spelling_result['details']['grammar_details']
                    if isinstance(grammar_details, list):
                        grammar_details = "\n".join(map(str, grammar_details))
                    for error in (grammar_details.split('\n') if isinstance(grammar_details, str) else grammar_details):
                        if isinstance(error, str) and error.strip():
                            error_message += f"‚Ä¢ {error.strip()}\n"
                    error_message += "\n"
                    has_serious_issues = True
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                readability = spelling_result["categories"]["readability"]
                error_message += (
                    f"üìö –ß–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {readability['score']}/10\n"
                    f"–£—Ä–æ–≤–µ–Ω—å: {readability['level']}\n"
                    f"{spelling_result['details']['readability_details']}\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                if "improvements" in spelling_result:
                    improvements = spelling_result["improvements"]
                    if any(improvements.values()):
                        error_message += "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n"
                        
                        if improvements["corrections"]:
                            error_message += "\n‚úçÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
                            error_message += "\n".join(f"‚Ä¢ {correction}" for correction in improvements["corrections"])
                            
                        if improvements["structure"]:
                            error_message += "\n\nüìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–∞:\n"
                            error_message += "\n".join(f"‚Ä¢ {suggestion}" for suggestion in improvements["structure"])
                            
                        if improvements["readability"]:
                            error_message += "\n\nüìö –ß–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å:\n"
                            error_message += "\n".join(f"‚Ä¢ {tip}" for tip in improvements["readability"])
                            
                        if improvements["engagement"]:
                            error_message += "\n\nüéØ –í–æ–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n"
                            error_message += "\n".join(f"‚Ä¢ {idea}" for idea in improvements["engagement"])
                
                if has_serious_issues:
                    await notify_admins(channel_data, error_message, bot, SUPER_ADMIN_ID, message)
                
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç—Ä–∏–∫
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫")
        asyncio.create_task(check_post_metrics_later(client, bot, chat_id, message.message_id, 
                                                   channel_data.get('title', chat_id), 
                                                   channel_data.get('subscribers', 0), 
                                                   channel_data.get('admins', []),
                                                   SUPER_ADMIN_ID))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞: {e}", exc_info=True)

@dp.message(lambda message: waiting_for_channel)
async def process_channel_addition(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        parts = message.text.split()
        if len(parts) < 1:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @username +05:00 –∏–ª–∏ -100123456789 -02:30")
            return

        channel_id = parts[0]
        timezone = 0

        if len(parts) > 1:
            try:
                tz_str = parts[1]
                sign = 1 if tz_str[0] == '+' else -1
                if ':' in tz_str:
                    hours, minutes = map(int, tz_str[1:].split(':'))
                    timezone = sign * (hours + (minutes / 60))
                else:
                    timezone = float(tz_str)
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone:+.2f} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            except ValueError:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: +05:00 –∏–ª–∏ -02:30")
                return

        if not (channel_id.startswith('@') or channel_id.startswith('-100')):
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@' –∏–ª–∏ '-100'")
            return

        if channel_id in channels:
            await message.reply("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        chat = await bot.get_chat(channel_id)
        chat_info = await bot.get_chat_member_count(channel_id)
        
        subscribers = int(chat_info)
        
        channels[channel_id] = {
            "timezone": timezone,
            "subscribers": subscribers,
            "title": chat.title,
            "posts": [],
            "chat_id": chat.id,
            "admins": [message.from_user.id]
        }
        save_channels()
        
        channel_info = (
            f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìå –ö–∞–Ω–∞–ª: {channel_id}\n"
            f"üìë –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers:,}\n"
            f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone:+.2f}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∫–∞–Ω–∞–ª–∞
        await message.reply(channel_info)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É
        if message.from_user.id != SUPER_ADMIN_ID:
            super_admin_notification = (
                f"üÜï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª!\n\n"
                f"üë§ –î–æ–±–∞–≤–∏–ª: {message.from_user.full_name} (ID: {message.from_user.id})\n\n"
                f"{channel_info}"
            )
            try:
                await bot.send_message(SUPER_ADMIN_ID, super_admin_notification)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É: {e}")
        
        logger.info(f"–ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º {timezone}, –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")

async def get_post_metrics(client, chat_id: str, message_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç–∞ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏) –∏—Å–ø–æ–ª—å–∑—É—è Telethon"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telethon
        if not client.is_connected():
            logger.info("Telethon –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            await client.connect()
            
        if not await client.is_user_authorized():
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            await client.start()
            
        logger.info("Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
        try:
            channel_entity = await client.get_entity(int(chat_id))
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞: {channel_entity.title} (id: {channel_entity.id})")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message = await client.get_messages(channel_entity, ids=message_id)
            if not message:
                logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = {
            'views': getattr(message, 'views', 0),
            'reactions': 0,
            'forwards': getattr(message, 'forwards', 0),
            'replies': getattr(message, 'replies', 0) if hasattr(message, 'replies') else 0,
            'post_author': getattr(message, 'post_author', None),
            'date': message.date.isoformat() if hasattr(message, 'date') else None,
        }

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        if hasattr(message, 'reactions') and message.reactions:
            reactions_data = []
            total_reactions = 0
            for reaction in message.reactions.results:
                reaction_count = reaction.count
                total_reactions += reaction_count
                reactions_data.append({
                    'emoji': str(reaction.reaction),
                    'count': reaction_count
                })
            metrics['reactions'] = total_reactions
            metrics['reactions_details'] = reactions_data
            
        logger.info(f"–°–æ–±—Ä–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id}:")
        logger.info(f"- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics['views']}")
        logger.info(f"- –†–µ–∞–∫—Ü–∏–∏: {metrics['reactions']}")
        logger.info(f"- –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {metrics['forwards']}")
        logger.info(f"- –û—Ç–≤–µ—Ç—ã: {metrics['replies']}")
        if metrics.get('reactions_details'):
            logger.info("- –î–µ—Ç–∞–ª–∏ —Ä–µ–∞–∫—Ü–∏–π:")
            for reaction in metrics['reactions_details']:
                logger.info(f"  ‚Ä¢ {reaction['emoji']}: {reaction['count']}")

        return metrics

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ –ø–æ—Å—Ç–∞ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}", exc_info=True)
        return None

async def check_post_metrics_later(client, bot, chat_id: str, message_id: int, channel_title: str, subscribers: int, admins: list, super_admin_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞"""
    try:
        # –ò—â–µ–º –∫–∞–Ω–∞–ª –ø–æ chat_id
        channel_info = None
        for channel_id, data in channels.items():
            if str(data.get('chat_id')) == chat_id:
                channel_info = data
                break
        
        if channel_info is None:
            logger.error(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
            
        # –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
        logger.info(f"üîÑ –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ {message_id}")
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telethon
            message = await client.get_messages(int(chat_id), ids=message_id)
            if message and message.text:
                spelling_result = await check_spelling(message.text, CONFIG["OPENAI_API_KEY"])
                if spelling_result["has_errors"]:
                    error_message = f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞:\n\n"
                    error_message += f"üìå –ö–∞–Ω–∞–ª: {channel_title}\n"
                    error_message += f"üî¢ ID –ø–æ—Å—Ç–∞: {message_id}\n"
                    error_message += f"üîó –°—Å—ã–ª–∫–∞: https://t.me/c/{str(chat_id)[4:]}/{message_id}\n\n"
                    error_message += f"üìÑ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{message.text[:200]}{'...' if len(message.text) > 200 else ''}\n\n"
                    
                    has_serious_issues = False
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
                    if spelling_result["categories"]["spelling"]:
                        error_message += "üîç –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:\n"
                        spelling_details = spelling_result['details']['spelling_details']
                        if isinstance(spelling_details, list):
                            spelling_details = "\n".join(map(str, spelling_details))
                        for error in (spelling_details.split('\n') if isinstance(spelling_details, str) else spelling_details):
                            if isinstance(error, str) and error.strip():
                                error_message += f"‚Ä¢ {error.strip()}\n"
                        error_message += "\n"
                        has_serious_issues = True
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
                    if spelling_result["categories"]["grammar"]:
                        error_message += "üìù –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:\n"
                        grammar_details = spelling_result['details']['grammar_details']
                        if isinstance(grammar_details, list):
                            grammar_details = "\n".join(map(str, grammar_details))
                        for error in (grammar_details.split('\n') if isinstance(grammar_details, str) else grammar_details):
                            if isinstance(error, str) and error.strip():
                                error_message += f"‚Ä¢ {error.strip()}\n"
                        error_message += "\n"
                        has_serious_issues = True
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                    readability = spelling_result["categories"]["readability"]
                    error_message += (
                        f"üìö –ß–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {readability['score']}/10\n"
                        f"–£—Ä–æ–≤–µ–Ω—å: {readability['level']}\n"
                        f"{spelling_result['details']['readability_details']}\n"
                    )
                    
                    if has_serious_issues:
                        await notify_admins(channel_info, error_message, bot, super_admin_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            
        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–µ—Ç—Ä–∏–∫
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 86400 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–µ—Ç—Ä–∏–∫")
        await asyncio.sleep(86400)  # 86400 —Å–µ–∫—É–Ω–¥
            
        # –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
        logger.info(f"üîÑ –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ—Å—Ç–∞ {message_id}")
        try:
            metrics = await get_post_metrics(client, chat_id, message_id)
            if not metrics:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id}")
                return

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            metrics_data = {
                "channel_info": {
                    "name": channel_title,
                    "subscribers": subscribers
                },
                "metrics": metrics
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            analysis = await analyze_metrics_with_gpt(metrics_data, CONFIG["OPENAI_API_KEY"])
            if not analysis:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
                return
                
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ {message_id}")
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            if not analysis.get("metrics_ok", False):
                message_url = f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"
                notification = (
                    f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –ø–æ—Å—Ç–∞\n\n"
                    f"üìä –ö–∞–Ω–∞–ª: {channel_title}\n"
                    f"üîó {message_url}\n\n"
                    f"üìà –ú–µ—Ç—Ä–∏–∫–∏:\n"
                )
                
                metrics_info = analysis.get("metrics", {})
                for metric_name, metric_data in metrics_info.items():
                    if isinstance(metric_data, dict):
                        current = metric_data.get("current", 0)
                        required = metric_data.get("required", 0)
                        percent = (current / required * 100) if required > 0 else 0
                        
                        emoji = "üëÅ" if metric_name == "views" else "‚ù§Ô∏è" if metric_name == "reactions" else "üîÑ"
                        name_ru = "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã" if metric_name == "views" else "–†–µ–∞–∫—Ü–∏–∏" if metric_name == "reactions" else "–ü–µ—Ä–µ—Å—ã–ª–∫–∏"
                        
                        notification += (
                            f"{emoji} {name_ru}: {current}/{required} ({percent:.1f}%)\n"
                            f"{'‚úÖ' if percent >= 100 else '‚ùå'} "
                            f"–ù–æ—Ä–º–∞: {required}\n\n"
                        )
                
                if "issues" in analysis:
                    notification += "‚ùå –ü—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join(f"‚Ä¢ {issue}" for issue in analysis["issues"])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                for admin_id in admins:
                    try:
                        await bot.send_message(admin_id, notification)
                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            else:
                logger.info(f"‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç—Ä–∏–∫: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç—Ä–∏–∫: {e}", exc_info=True)

def get_bot():
    return bot

set_bot_getter(get_bot)

if __name__ == "__main__":
    asyncio.run(main())
