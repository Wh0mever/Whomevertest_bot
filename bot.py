import json
import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from utils.database import load_json, save_json
from utils.logging import setup_logger
from utils.checks import (
    check_text_length, 
    check_spelling, 
    check_post_metrics, 
    check_news_actuality,
    check_content_moderation
)
from openai import OpenAI
from telethon import TelegramClient
from datetime import datetime, timedelta
import aiohttp
from utils.api import set_bot_getter
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open("config.json") as config_file:
    CONFIG = json.load(config_file)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG.update({
    "METRICS_CHECK_DELAY": 3600,  # 1 —á–∞—Å
    "TEXT_CHECK_DELAY": 0,  # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    "REACTION_CHECK_DELAY": 86400,  # 24 —á–∞—Å–∞
})

bot = Bot(token=CONFIG["API_TOKEN"])

# –í aiogram 3.x Dispatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å, –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –±–æ—Ç–∞ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.bot = bot

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö
channels = load_json("channels.json")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
waiting_for_channel = False

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ Telethon
client = TelegramClient('bot_session', CONFIG["API_ID"], CONFIG["API_HASH"])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_channels():
    save_json("channels.json", channels)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    try:
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    try:
        await message.reply(
            "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
            "- `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "- `/help` - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
            "- `/add_channel` - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "   –ü—Ä–∏–º–µ—Ä—ã:\n"
            "   `/add_channel @channel +05:00`\n"
            "   `/add_channel -100123456789 -02:30`\n"
            "- `/cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            "- `/channels` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "- `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º\n\n"
            "**–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:**\n"
            "Telegram: [t.me/ctrltg](t.me/ctrltg)\n"
            "–°–∞–π—Ç: [whomever.tech](https://whomever.tech)",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@dp.message(Command("add_channel"))
async def add_channel_command(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ
        args = message.text.split(maxsplit=1)
        if len(args) > 1:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —Å—Ä–∞–∑—É
            await process_channel_with_timezone(message, args[1])
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            global waiting_for_channel
            waiting_for_channel = True
            await message.reply(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.\n"
                "–§–æ—Ä–º–∞—Ç: @username +05:00 –∏–ª–∏ -100123456789 -02:30"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")

async def process_channel_with_timezone(message: types.Message, channel_id: str, timezone: float):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(channel_id)
        chat_info = await bot.get_chat_member_count(channel_id)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        subscribers = int(chat_info)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
        channel_info = (
            f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers:,}\n"
            f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone:+.2f}"
        )
        
        await message.reply(channel_info)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                          "1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                          "2. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                          "3. –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")


# –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channels –ø–µ—Ä–µ–¥ –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
@dp.message(Command("channels"))
async def list_channels(message: types.Message):
    try:
        if not channels:
            await message.reply("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
            return

        text = "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –¥–ª—è aiogram 3.x
        buttons = [[InlineKeyboardButton(
                    text=channel_id,
                    callback_data=f"manage_channel:{channel_id}"
        )] for channel_id in channels.keys()]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.reply(text, reply_markup=keyboard)
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞–º–∏: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞–º–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º
@dp.callback_query(lambda c: c.data and c.data.startswith("manage_channel:"))
async def manage_channel(callback_query: types.CallbackQuery):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: {callback_query.data}")
        channel_id = callback_query.data.split(":")[1]
        channel_data = channels[channel_id]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"delete:{channel_id}")],
            [InlineKeyboardButton(text="üïí –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data=f"timezone:{channel_id}")],
            [InlineKeyboardButton(
                text=f"üì∞ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: {'‚úÖ' if channel_data['is_news'] else '‚ùå'}",
            callback_data=f"toggle_news:{channel_id}"
            )]
        ])

        await callback_query.message.edit_text(
            f"üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: {channel_id}\n"
            f"üìë –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {channel_data['timezone']:+.2f}\n"
            f"üì∞ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: {'–î–∞' if channel_data['is_news'] else '–ù–µ—Ç'}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {channel_data['subscribers']:,}",
            reply_markup=keyboard
        )
        logger.info(f"–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º {channel_id} –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–º: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–º", show_alert=True)


@dp.callback_query(lambda c: c.data and c.data.startswith("delete:"))
async def delete_channel(callback_query: types.CallbackQuery):
    try:
        channel_id = callback_query.data.split(":")[1]
        if channel_id in channels:
            del channels[channel_id]
            save_channels()
            await callback_query.message.edit_text(
                f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö."
            )
            logger.info(f"–ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            await callback_query.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await callback_query.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞", show_alert=True)


@dp.callback_query(lambda c: c.data.startswith("timezone:"))
async def set_timezone(callback_query: types.CallbackQuery):
    try:
        channel_id = callback_query.data.split(":")[1]
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        buttons = []
        row = []
        for tz in range(-12, 13):
            row.append(InlineKeyboardButton(
                text=f"{tz:+d}",
                callback_data=f"set_tz:{channel_id}:{tz}"
            ))
            if len(row) == 6:  # –ü–æ 6 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
                buttons.append(row)
                row = []
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            buttons.append(row)
            
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞", show_alert=True)


@dp.callback_query(lambda c: c.data.startswith("set_tz:"))
async def confirm_timezone(callback_query: types.CallbackQuery):
    try:
        _, channel_id, tz = callback_query.data.split(":")
        channels[channel_id]["timezone"] = int(tz)
        save_channels()
        await callback_query.message.reply(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz:+d}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.")


@dp.callback_query(lambda c: c.data.startswith("toggle_news:"))
async def toggle_news_status(callback_query: types.CallbackQuery):
    try:
        channel_id = callback_query.data.split(":")[1]
        channels[channel_id]["is_news"] = not channels[channel_id]["is_news"]
        save_channels()
        await callback_query.message.reply(
            f"–°—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è {channel_id}: {'–î–∞' if channels[channel_id]['is_news'] else '–ù–µ—Ç'}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞.")


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        for chat_id, data in channels.items():
            channel_info = await bot.get_chat(chat_id)
            stats_text += (
                f"üìå {channel_info.title}\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {data.get('subscribers', 0):,}\n"
                f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data.get('timezone', 0):+.2f}\n"
                f"üì∞ –ù–æ–≤–æ—Å—Ç–Ω–æ–π: {'‚úÖ' if data.get('is_news', False) else '‚ùå'}\n\n"
            )
        await message.reply(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def update_subscribers_count():
    while True:
        try:
            for channel_id, data in channels.items():
                try:
                    if "chat_id" in data:
                        count = await bot.get_chat_member_count(data["chat_id"])
                        channels[channel_id]["subscribers"] = count
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {channel_id}: {count}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            save_channels()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        await asyncio.sleep(CONFIG["UPDATE_INTERVALS"]["SUBSCRIBERS"])  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é main
async def main():
    await client.start()  # –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    logger.info("–ö–ª–∏–µ–Ω—Ç Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω.")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    asyncio.create_task(update_subscribers_count())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    await dp.start_polling(bot)


@dp.message(Command("cancel"))
async def cancel_command(message: types.Message):
    global waiting_for_channel
    if waiting_for_channel:
        waiting_for_channel = False
        await message.reply("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö
@dp.channel_post()
async def handle_channel_post(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
    try:
        chat_id = str(message.chat.id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ {message.chat.title or chat_id}")
        
        # –ò—â–µ–º –∫–∞–Ω–∞–ª –ø–æ chat_id
        channel_data = None
        for channel_id, data in channels.items():
            if str(data.get('chat_id')) == chat_id:
                channel_data = data
                break
                
        if not channel_data:
            logger.error(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OpenAI
        if message.text:
            logger.info("–≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            content_check = await check_content_moderation(message.text)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_check}")
            
            if content_check.get("has_errors", False):
                logger.info(f"–≠—Ç–∞–ø 1: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
                error_details = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
                
                if content_check.get("categories", {}).get("spelling"):
                    error_details += "üìù –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:\n"
                    error_details += content_check.get("details", {}).get("spelling_details", "–ù–µ —É–∫–∞–∑–∞–Ω–æ") + "\n\n"
                    
                if content_check.get("categories", {}).get("grammar"):
                    error_details += "üìö –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:\n"
                    error_details += content_check.get("details", {}).get("grammar_details", "–ù–µ —É–∫–∞–∑–∞–Ω–æ") + "\n\n"
                    
                if content_check.get("categories", {}).get("spam"):
                    error_details += "üîÑ –ü–æ–≤—Ç–æ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ:\n"
                    error_details += content_check.get("details", {}).get("spam_details", "–ù–µ —É–∫–∞–∑–∞–Ω–æ") + "\n\n"
                
                readability = content_check.get("categories", {}).get("readability", {})
                error_details += f"üìä –ß–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞:\n"
                error_details += f"–û—Ü–µ–Ω–∫–∞: {readability.get('score', 0)}/10\n"
                error_details += f"–£—Ä–æ–≤–µ–Ω—å: {readability.get('level', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
                error_details += content_check.get("details", {}).get("readability_details", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                
                await notify_admins(
                    channel_data,
                    message,
                    error_type="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º",
                    error_details=error_details
                )
                return
            logger.info("–≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
            if channel_data.get("is_news", False):
                logger.info("–≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∫–∞–Ω–∞–ª–∞
                timezone_offset = channel_data.get('timezone', 0)
                post_date = message.date + timedelta(hours=timezone_offset)
                
                actuality_check = await check_news_actuality(message.text, post_date)
                if not actuality_check.get("is_actual", False):
                    logger.info("–≠—Ç–∞–ø 2: –ù–æ–≤–æ—Å—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                    error_details = (
                        f"üìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post_date.strftime('%H:%M')} (UTC{timezone_offset:+.2f})\n"
                        f"üïí –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n"
                        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {actuality_check.get('news_type', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n"
                        f"‚ùóÔ∏è –í–∞–∂–Ω–æ—Å—Ç—å: {actuality_check.get('importance_level', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n\n"
                        f"‚ùå –ü—Ä–∏—á–∏–Ω–∞: {actuality_check.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
                        f"üìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n"
                        f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {actuality_check.get('source_reliability', {}).get('total_sources', 0)}\n"
                        f"‚Ä¢ –ù–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {actuality_check.get('source_reliability', {}).get('reliable_sources', 0)}\n"
                        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {actuality_check.get('source_reliability', {}).get('average_score', 0):.1f}/10\n\n"
                        f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:\n"
                        f"‚Ä¢ –°–≤–µ–∂–µ—Å—Ç—å: {'‚úÖ –°–≤–µ–∂–∞—è' if actuality_check.get('time_relevance', {}).get('is_recent', False) else '‚ùå –£—Å—Ç–∞—Ä–µ–≤—à–∞—è'}\n"
                        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {actuality_check.get('time_relevance', {}).get('hours_ago', 0)} —á–∞—Å–æ–≤\n"
                        f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {actuality_check.get('time_relevance', {}).get('matches_found', 0)}\n\n"
                        f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n"
                        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' if actuality_check.get('verification', {}).get('is_verified', False) else '‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'}\n"
                        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {actuality_check.get('verification', {}).get('verification_level', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n\n"
                        f"üì∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
                    sources = actuality_check.get('verification', {}).get('sources', [])
                    if sources:
                        for source in sources:
                            if isinstance(source, dict):
                                title = source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                                url = source.get('url', '')
                                source_name = source.get('source', '').split(': ')[-1]
                                reliability = source.get('reliability_score', 0)
                                if url:
                                    error_details += f"‚Ä¢ [{title}]({url})\n  üìç {source_name} (–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {reliability}/10)\n"
                            elif isinstance(source, str) and 'http' in source:
                                error_details += f"‚Ä¢ [–ò—Å—Ç–æ—á–Ω–∏–∫]({source})\n"
                            else:
                                error_details += f"‚Ä¢ {source}\n"
                    else:
                        error_details += "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                    
                    error_details += f"\nüìã –ü—Ä–∞–≤–∏–ª–æ: {'–¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –≤—á–µ—Ä–∞—à–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏' if post_date.hour < 12 else '–Ω–æ–≤–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º–∏'}"
                    
                    await notify_admins(
                        channel_data,
                        message,
                        error_type="–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å",
                        error_details=error_details,
                        parse_mode="Markdown"  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Markdown –¥–ª—è —Å—Å—ã–ª–æ–∫
                    )
                    return
                logger.info("–≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–∞")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç—Ä–∏–∫
            logger.info("–≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫")
            asyncio.create_task(check_post_metrics_later(chat_id, message.message_id))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞: {e}", exc_info=True)


@dp.message(lambda message: waiting_for_channel)
async def process_channel_addition(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        parts = message.text.split()
        if len(parts) < 1:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @username +05:00 –∏–ª–∏ -100123456789 -02:30")
            return

        channel_id = parts[0]
        timezone = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        if len(parts) > 1:
            try:
                # –ü–∞—Ä—Å–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                tz_str = parts[1]
                sign = 1 if tz_str[0] == '+' else -1
                if ':' in tz_str:
                    hours, minutes = map(int, tz_str[1:].split(':'))
                    timezone = sign * (hours + (minutes / 60))
                else:
                    timezone = float(tz_str)
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone:+.2f} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            except ValueError:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: +05:00 –∏–ª–∏ -02:30")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞
        if not (channel_id.startswith('@') or channel_id.startswith('-100')):
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@' –∏–ª–∏ '-100'")
            return

        if channel_id in channels:
            await message.reply("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(channel_id)
        chat_info = await bot.get_chat_member_count(channel_id)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        subscribers = int(chat_info)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channels[channel_id] = {
            "timezone": timezone,
            "is_news": True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–Ω—ã–º
            "subscribers": subscribers,
            "title": chat.title,
            "posts": [],
            "chat_id": chat.id,
            "admins": [message.from_user.id]  # –î–æ–±–∞–≤–ª—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        }
        save_channels()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
        channel_info = (
            f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìå –ö–∞–Ω–∞–ª: {channel_id}\n"
            f"üìë –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers:,}\n"
            f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone:+.2f}"
        )
        
        await message.reply(channel_info)
        logger.info(f"–ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º {timezone}, –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")


async def get_post_metrics(chat_id: str, message_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç–∞ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏) –∏—Å–ø–æ–ª—å–∑—É—è Telethon"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telethon
        if not client.is_connected():
            logger.info("Telethon –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            await client.connect()
            
        if not await client.is_user_authorized():
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            await client.start()
            
        logger.info("Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
        try:
            channel_entity = await client.get_entity(int(chat_id))
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞: {channel_entity.title} (id: {channel_entity.id})")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message = await client.get_messages(channel_entity, ids=message_id)
            if not message:
                logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = {
            'views': getattr(message, 'views', 0),
            'reactions': 0,
            'forwards': getattr(message, 'forwards', 0),
            'replies': getattr(message, 'replies', 0) if hasattr(message, 'replies') else 0,
            'post_author': getattr(message, 'post_author', None),
            'date': message.date.isoformat() if hasattr(message, 'date') else None,
        }

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        if hasattr(message, 'reactions') and message.reactions:
            reactions_data = []
            total_reactions = 0
            for reaction in message.reactions.results:
                reaction_count = reaction.count
                total_reactions += reaction_count
                reactions_data.append({
                    'emoji': str(reaction.reaction),
                    'count': reaction_count
                })
            metrics['reactions'] = total_reactions
            metrics['reactions_details'] = reactions_data
            
        logger.info(f"–°–æ–±—Ä–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id}:")
        logger.info(f"- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics['views']}")
        logger.info(f"- –†–µ–∞–∫—Ü–∏–∏: {metrics['reactions']}")
        logger.info(f"- –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {metrics['forwards']}")
        logger.info(f"- –û—Ç–≤–µ—Ç—ã: {metrics['replies']}")
        if metrics.get('reactions_details'):
            logger.info("- –î–µ—Ç–∞–ª–∏ —Ä–µ–∞–∫—Ü–∏–π:")
            for reaction in metrics['reactions_details']:
                logger.info(f"  ‚Ä¢ {reaction['emoji']}: {reaction['count']}")

        return metrics

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ –ø–æ—Å—Ç–∞ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}", exc_info=True)
        return None

async def check_post_metrics_later(chat_id: str, message_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è"""
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}")
        
        # –ò—â–µ–º –∫–∞–Ω–∞–ª –ø–æ chat_id
        channel_info = None
        for channel_id, data in channels.items():
            if str(data.get('chat_id')) == chat_id:
                channel_info = data
                logger.info(f"–ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {data.get('title')} (id: {chat_id})")
                break
        
        if channel_info is None:
            logger.error(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        subscribers_count = channel_info.get('subscribers', 0)
        
        logger.info(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ—Ç—Ä–∏–∫–∞–º:")
        logger.info(f"- –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}")
        logger.info(f"- –¢—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {max(1, round(subscribers_count * 0.1))} (10% –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")

        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–µ—Ç—Ä–∏–∫
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–µ—Ç—Ä–∏–∫...")
        await asyncio.sleep(60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ Telethon
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...")
        metrics = await get_post_metrics(chat_id, message_id)
        
        if metrics:
            views = metrics.get('views', 0)
            reactions = metrics.get('reactions', 0)
            forwards = metrics.get('forwards', 0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            required_views = max(1, round(subscribers_count * 0.1))
            required_reactions = max(1, round(views * 0.06))
            required_forwards = max(1, round(views * 0.01))
            
            logger.info(f"–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
            logger.info(f"- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}/{required_views} ({views/required_views*100:.1f}%)")
            logger.info(f"- –†–µ–∞–∫—Ü–∏–∏: {reactions}/{required_reactions} ({reactions/required_reactions*100:.1f}%)")
            logger.info(f"- –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {forwards}/{required_forwards} ({forwards/required_forwards*100:.1f}%)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics_ok, issues = await check_post_metrics(
                views=views,
                reactions=reactions,
                forwards=forwards,
                subscribers=subscribers_count,
                channel_name=channel_info.get('title', chat_id),
                message_id=message_id,
                message_text="",  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç—Ä–∏–∫
                message_url=f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"
            )
            
            if not metrics_ok:
                logger.warning("–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–µ—Ç—Ä–∏–∫—É
                views_ok = views >= required_views
                reactions_ok = reactions >= required_reactions
                forwards_ok = forwards >= required_forwards
                
                message = (
                    f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å—Ç–µ!\n\n"
                    f"–ö–∞–Ω–∞–ª: {channel_info.get('title', chat_id)}\n"
                    f"ID –ø–æ—Å—Ç–∞: {message_id}\n\n"
                    f"üìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:\n"
                    f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}/{required_views} ({views/required_views*100:.1f}%) {('‚úÖ' if views_ok else '‚ùå')}\n"
                    f"üëç –†–µ–∞–∫—Ü–∏–∏: {reactions}/{required_reactions} ({reactions/required_reactions*100:.1f}%) {('‚úÖ' if reactions_ok else '‚ùå')}\n"
                    f"‚ÜóÔ∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {forwards}/{required_forwards} ({forwards/required_forwards*100:.1f}%) {('‚úÖ' if forwards_ok else '‚ùå')}\n"
                    f"üí¨ –û—Ç–≤–µ—Ç—ã: {metrics.get('replies', 0)}\n\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
                if not metrics_ok:
                    message += "‚ùóÔ∏è –ü—Ä–æ–±–ª–µ–º—ã:\n"
                    if not views_ok:
                        message += f"‚Ä¢ –ù–∏–∑–∫–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {views} –∏–∑ {required_views} (–Ω–æ—Ä–º–∞: 10% –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)\n"
                    if not reactions_ok:
                        message += f"‚Ä¢ –ù–∏–∑–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: {reactions} –∏–∑ {required_reactions} (–Ω–æ—Ä–º–∞: 6% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)\n"
                    if not forwards_ok:
                        message += f"‚Ä¢ –ù–∏–∑–∫–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {forwards} –∏–∑ {required_forwards} (–Ω–æ—Ä–º–∞: 1% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)\n"
                    message += "\n"
                
                message += f"üîó –°—Å—ã–ª–∫–∞: https://t.me/c/{str(chat_id)[4:]}/{message_id}"
                
                if metrics.get('reactions_details'):
                    message += "\n\nüìù –î–µ—Ç–∞–ª–∏ —Ä–µ–∞–∫—Ü–∏–π:\n"
                    for reaction in metrics['reactions_details']:
                        message += f"{reaction['emoji']}: {reaction['count']}\n"
                
                await notify_admins(channel_info, message)
            else:
                logger.info("–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç—Ä–∏–∫: {e}", exc_info=True)

async def notify_admins(channel_data, message, error_type=None, error_details=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –∫–∞–Ω–∞–ª–∞"""
    try:
        admin_ids = channel_data.get('admins', [])
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º: {admin_ids}")
        
        if not admin_ids:
            logger.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if isinstance(message, str):
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–µ—Ç—Ä–∏–∫–∞—Ö)
            message_text = message
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –¥—Ä—É–≥–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            message_text = (
                f"üì¢ {error_type}\n\n"
                f"–ö–∞–Ω–∞–ª: {channel_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–ü–æ—Å—Ç: {message.message_id}\n"
            )
            
            if error_details:
                message_text += f"\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {error_details}\n"
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            post_link = f"https://t.me/c/{str(message.chat.id)[4:]}/{message.message_id}"
            message_text += f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: {post_link}"
        
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤: {message_text}")

        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, message_text, parse_mode=parse_mode)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def update_channel_info(chat_id: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(chat_id)
        subscribers_count = await bot.get_chat_member_count(chat_id)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º GetChatMemberCount –≤ int
        subscribers_count = int(subscribers_count)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {chat.title}, –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ channels
        if chat_id not in channels:
            channels[chat_id] = {
                "title": chat.title,
                "subscribers": subscribers_count,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ int
                "required_views": 0,
                "required_reactions": 0,
                "timezone": 0,
                "is_news": False,
                "admins": [],
                "posts": [],
                "chat_id": chat.id
            }
        else:
            channels[chat_id].update({
                "title": chat.title,
                "subscribers": subscribers_count,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ int
                "chat_id": chat.id
            })
            
        save_channels()
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ {chat_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}")


# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
def get_bot():
    return bot

set_bot_getter(get_bot)

if __name__ == "__main__":
    asyncio.run(main())
