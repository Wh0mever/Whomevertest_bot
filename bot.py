import json
import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, Text
from utils.database import load_json, save_json
from utils.logging import setup_logger
from utils.checks import (
    check_spelling,
    check_post_metrics,
    check_text_length
)
from openai import OpenAI
from telethon import TelegramClient
from datetime import datetime, timedelta
import aiohttp
from utils.api import set_bot_getter
from utils.keyboards import get_main_keyboard
from typing import List, Dict, Any
from utils.config import CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open("config.json") as config_file:
    CONFIG = json.load(config_file)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö –∏ –∏—Å—Ç–æ—Ä–∏–∏
channels = load_json("channels.json", default={})
history = load_json("history.json", default={})

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_channels():
    save_json("channels.json", channels)

def save_history():
    save_json("history.json", history)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG.update({
    "METRICS_CHECK_DELAY": 3600,  # 1 —á–∞—Å
    "TEXT_CHECK_DELAY": 0,  # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    "REACTION_CHECK_DELAY": 86400,  # 24 —á–∞—Å–∞
})

bot = Bot(token=CONFIG["API_TOKEN"])

# –í aiogram 3.x Dispatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å, –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –±–æ—Ç–∞ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.bot = bot

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
waiting_for_channel = False

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ Telethon
client = TelegramClient('bot_session', CONFIG["API_ID"], CONFIG["API_HASH"])

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
ADMIN_IDS = CONFIG.get('ADMIN_IDS', [])

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
pending_checks = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    try:
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


# –ö–æ–º–∞–Ω–¥–∞ /help –∏ –∫–Ω–æ–ø–∫–∞ FAQ
@dp.message(Command("help"))
@dp.message(Text(text="‚ùì FAQ"))
async def help_command(message: types.Message):
    try:
        await message.reply(
            "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ 48 —á–∞—Å–æ–≤\n\n"
            "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Å—Ç–∞–º:**\n"
            "1Ô∏è‚É£ –≠—Ç–∞–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
            "   ‚Ä¢ –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞\n"
            "   ‚Ä¢ –°–ø–∞–º –∏ –ø–æ–≤—Ç–æ—Ä—ã\n"
            "   ‚Ä¢ –ß–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞\n\n"
            "2Ô∏è‚É£ –≠—Ç–∞–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫ (—á–µ—Ä–µ–∑ 24 —á–∞—Å–∞):\n"
            "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: 10% –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            "   ‚Ä¢ –†–µ–∞–∫—Ü–∏–∏: 6% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
            "   ‚Ä¢ –ü–µ—Ä–µ—Å—ã–ª–∫–∏: 15% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n"
            "**–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:**\n"
            "Telegram: [t.me/ctrltg](t.me/ctrltg)\n"
            "–°–∞–π—Ç: [whomever.tech](https://whomever.tech)",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ help/FAQ: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–∫–æ–º–∞–Ω–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞)
@dp.message(Command("add_channel"))
@dp.message(Text(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"))
async def add_channel_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        global waiting_for_channel
        waiting_for_channel = True
        await message.reply(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.\n"
            "–§–æ—Ä–º–∞—Ç: @username +05:00 –∏–ª–∏ -100123456789 -02:30\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")


# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (–∫–æ–º–∞–Ω–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞)
@dp.message(Command("channels"))
@dp.message(Text(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"))
async def list_channels(message: types.Message):
    try:
        if not channels:
            await message.reply("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
            return

        text = "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        buttons = [[InlineKeyboardButton(
                    text=channel_id,
                    callback_data=f"manage_channel:{channel_id}"
        )] for channel_id in channels.keys()]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.reply(text, reply_markup=keyboard)
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞–º–∏: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞–º–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º
@dp.callback_query(lambda c: c.data and c.data.startswith("manage_channel:"))
async def manage_channel(callback_query: types.CallbackQuery):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: {callback_query.data}")
        channel_id = callback_query.data.split(":")[1]
        channel_data = channels[channel_id]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ç—Ä–∏–∫
        metrics = channel_data.get('metrics', {
            'views_percent': CONFIG['POST_SETTINGS']['MIN_VIEWS_PERCENT'],
            'reactions_percent': CONFIG['POST_SETTINGS']['MIN_REACTIONS_PERCENT'],
            'forwards_percent': CONFIG['POST_SETTINGS']['MIN_FORWARDS_PERCENT']
        })

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"delete:{channel_id}")],
            [InlineKeyboardButton(text="üïí –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data=f"timezone:{channel_id}")],
            [InlineKeyboardButton(
                text=f"üì∞ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: {'‚úÖ' if channel_data['is_news'] else '‚ùå'}",
                callback_data=f"toggle_news:{channel_id}"
            )],
            [InlineKeyboardButton(text="üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ç—Ä–∏–∫", callback_data=f"metrics_settings:{channel_id}")]
        ])

        await callback_query.message.edit_text(
            f"üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: {channel_id}\n"
            f"üìë –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {channel_data['timezone']:+.2f}\n"
            f"üì∞ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: {'–î–∞' if channel_data['is_news'] else '–ù–µ—Ç'}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {channel_data['subscribers']:,}\n\n"
            f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ç—Ä–∏–∫:\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics['views_percent']}% –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            f"üëç –†–µ–∞–∫—Ü–∏–∏: {metrics['reactions_percent']}% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
            f"‚ÜóÔ∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {metrics['forwards_percent']}% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
            reply_markup=keyboard
        )
        logger.info(f"–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º {channel_id} –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–º: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–º", show_alert=True)


@dp.callback_query(lambda c: c.data and c.data.startswith("delete:"))
async def delete_channel(callback_query: types.CallbackQuery):
    try:
        channel_id = callback_query.data.split(":")[1]
        if channel_id in channels:
            del channels[channel_id]
            save_channels()
            await callback_query.message.edit_text(
                f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö."
            )
            logger.info(f"–ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            await callback_query.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await callback_query.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞", show_alert=True)


@dp.callback_query(lambda c: c.data.startswith("timezone:"))
async def set_timezone(callback_query: types.CallbackQuery):
    try:
        channel_id = callback_query.data.split(":")[1]
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        buttons = []
        row = []
        for tz in range(-12, 13):
            row.append(InlineKeyboardButton(
                text=f"{tz:+d}",
                callback_data=f"set_tz:{channel_id}:{tz}"
            ))
            if len(row) == 6:  # –ü–æ 6 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
                buttons.append(row)
                row = []
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            buttons.append(row)
            
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞", show_alert=True)


@dp.callback_query(lambda c: c.data.startswith("set_tz:"))
async def confirm_timezone(callback_query: types.CallbackQuery):
    try:
        _, channel_id, tz = callback_query.data.split(":")
        channels[channel_id]["timezone"] = int(tz)
        save_channels()
        await callback_query.message.reply(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz:+d}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.")


@dp.callback_query(lambda c: c.data.startswith("toggle_news:"))
async def toggle_news_status(callback_query: types.CallbackQuery):
    try:
        channel_id = callback_query.data.split(":")[1]
        channels[channel_id]["is_news"] = not channels[channel_id]["is_news"]
        save_channels()
        await callback_query.message.reply(
            f"–°—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è {channel_id}: {'–î–∞' if channels[channel_id]['is_news'] else '–ù–µ—Ç'}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞.")


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∫–æ–º–∞–Ω–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞)
@dp.message(Command("stats"))
@dp.message(Text(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def stats_command(message: types.Message):
    try:
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        for chat_id, data in channels.items():
            channel_info = await bot.get_chat(chat_id)
            stats_text += (
                f"üìå {channel_info.title}\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {data.get('subscribers', 0):,}\n"
                f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data.get('timezone', 0):+.2f}\n\n"
            )
        await message.reply(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∫–æ–º–∞–Ω–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞)
@dp.message(Command("allstats"))
@dp.message(Text(text="üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def extended_stats_command(message: types.Message):
    try:
        stats_text = "üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 48 —á–∞—Å–æ–≤:\n\n"
        
        for chat_id, data in channels.items():
            try:
                channel_info = await bot.get_chat(chat_id)
                stats_text += f"üìå {channel_info.title}\n"
                stats_text += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {data.get('subscribers', 0):,}\n\n"
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                channel_posts = {k: v for k, v in history.items() 
                               if k.startswith(f"{chat_id}_") and 
                               (datetime.now() - datetime.fromisoformat(v['date'])).total_seconds() <= 48*3600}
                
                total_posts = len(channel_posts)
                failed_content = len([k for k, v in channel_posts.items() 
                                    if v.get("has_errors", False)])
                failed_metrics = len([k for k, v in channel_posts.items() 
                                    if v.get("metrics_failed", False)])
                
                stats_text += "üîç –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n"
                stats_text += f"‚Ä¢ –ù–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {failed_content}\n"
                content_success_rate = ((total_posts - failed_content) / total_posts * 100 
                                      if total_posts > 0 else 0)
                stats_text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {content_success_rate:.1f}%\n\n"
                
                stats_text += "üìä –ü—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫:\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_posts}\n"
                stats_text += f"‚Ä¢ –ù–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {failed_metrics}\n"
                metrics_success_rate = ((total_posts - failed_metrics) / total_posts * 100 
                                      if total_posts > 0 else 0)
                stats_text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {metrics_success_rate:.1f}%\n\n"
                
                stats_text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}")
                continue
        
        await message.reply(stats_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def update_subscribers_count():
    while True:
        try:
            for channel_id, data in channels.items():
                try:
                    if "chat_id" in data:
                        count = await bot.get_chat_member_count(data["chat_id"])
                        channels[channel_id]["subscribers"] = count
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {channel_id}: {count}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            save_channels()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        await asyncio.sleep(CONFIG["UPDATE_INTERVALS"]["SUBSCRIBERS"])  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async def check_pending_metrics_periodically():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    while True:
        try:
            results = await check_pending_metrics()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∞–¥–º–∏–Ω–∞–º
            if results and ADMIN_IDS:
                for admin_id in ADMIN_IDS:
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        summary = (
                            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫:\n\n"
                            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏: {len(results)}\n\n"
                        )
                        await bot.send_message(admin_id, summary)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        for result in results:
                            await bot.send_message(admin_id, result['message'])
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç—Ä–∏–∫: {e}")
            
        # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(300)

# –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é main
async def main():
    await client.start()  # –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    logger.info("–ö–ª–∏–µ–Ω—Ç Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω.")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(update_subscribers_count())
    asyncio.create_task(check_pending_metrics_periodically())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


@dp.message(Command("cancel"))
async def cancel_command(message: types.Message):
    global waiting_for_channel
    if waiting_for_channel:
        waiting_for_channel = False
        await message.reply("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö
@dp.channel_post()
async def handle_channel_post(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
    try:
        chat_id = str(message.chat.id)
        if chat_id not in channels:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await bot.get_chat(chat_id)
        subscribers = channels[chat_id].get('subscribers', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if message.text and len(message.text) > 500:
            logger.warning(f"–ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {chat_id} –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500 —Å–∏–º–≤–æ–ª–æ–≤!\n"
                         f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—à–∏–±–∫–∏
        has_errors = False
        if message.text:
            spelling_result = await check_spelling(message.text, CONFIG["OPENAI_API_KEY"])
            has_errors = spelling_result.get("has_errors", False)
            
            if has_errors:
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {spelling_result}")
                logger.info("–≠—Ç–∞–ø 1: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                admin_ids = CONFIG.get("ADMIN_IDS", [])
                if admin_ids:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º: {admin_ids}")
                    
                    message_text = (
                        f"üì¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n"
                        f"–ö–∞–Ω–∞–ª: {chat_id}\n"
                        f"–ü–æ—Å—Ç: {message.message_id}\n\n"
                        f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {spelling_result['errors']}"
                    )
                    
                    for admin_id in admin_ids:
                        try:
                            await bot.send_message(admin_id, message_text)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                else:
                    logger.warning("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫
        post_data = {
            'message_id': message.message_id,
            'chat_id': chat_id,
            'text': message.text if message.text else '',
            'date': datetime.now().isoformat(),
            'url': f"https://t.me/c/{str(chat_id)[4:]}/{message.message_id}",
            'subscribers': subscribers,
            'has_errors': has_errors
        }
        
        history[f"{chat_id}_{message.message_id}"] = post_data
        save_history()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        asyncio.create_task(
            check_post_metrics_later(
                chat_id=chat_id,
                message_id=message.message_id,
                delay_seconds=CONFIG["POST_SETTINGS"]["METRICS_CHECK_DELAY"]
            )
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞: {e}", exc_info=True)


@dp.message(lambda message: waiting_for_channel)
async def process_channel_addition(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        global waiting_for_channel
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        parts = message.text.split()
        if len(parts) < 1:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @username +05:00 –∏–ª–∏ -100123456789 -02:30")
            return

        channel_id = parts[0]
        timezone = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        if len(parts) > 1:
            try:
                # –ü–∞—Ä—Å–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                tz_str = parts[1]
                sign = 1 if tz_str[0] == '+' else -1
                if ':' in tz_str:
                    hours, minutes = map(int, tz_str[1:].split(':'))
                    timezone = sign * (hours + (minutes / 60))
                else:
                    timezone = float(tz_str)
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone:+.2f} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            except ValueError:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: +05:00 –∏–ª–∏ -02:30")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞
        if not (channel_id.startswith('@') or channel_id.startswith('-100')):
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@' –∏–ª–∏ '-100'")
            return

        if channel_id in channels:
            await message.reply("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        try:
            chat = await bot.get_chat(channel_id)
            chat_info = await bot.get_chat_member_count(channel_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            bot_member = await bot.get_chat_member(chat.id, bot.id)
            if not bot_member.can_read_messages:
                await message.reply(
                    "‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏:\n"
                    "- –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                )
                return
                
        except Exception as e:
            await message.reply(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ.\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "1. –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                "2. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n"
                "3. –£ –±–æ—Ç–∞ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "- –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                "- –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "- –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        subscribers = int(chat_info)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channels[channel_id] = {
            "timezone": timezone,
            "is_news": True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–Ω—ã–º
            "subscribers": subscribers,
            "title": chat.title,
            "posts": [],
            "chat_id": chat.id,
            "admins": [message.from_user.id]  # –î–æ–±–∞–≤–ª—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        }
        save_channels()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
        channel_info = (
            f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìå –ö–∞–Ω–∞–ª: {channel_id}\n"
            f"üìë –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers:,}\n"
            f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone:+.2f}"
        )
        
        await message.reply(channel_info)
        logger.info(f"–ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º {timezone}, –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        waiting_for_channel = False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID/username –∫–∞–Ω–∞–ª–∞\n"
            "2. –ù–∞–ª–∏—á–∏–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ\n"
            "3. –ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"
        )
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        waiting_for_channel = False


async def get_post_metrics(chat_id: str, message_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç–∞ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏) –∏—Å–ø–æ–ª—å–∑—É—è Telethon"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telethon
        if not client.is_connected():
            logger.info("Telethon –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            await client.connect()
            
        if not await client.is_user_authorized():
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            await client.start()
            
        logger.info("Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
        try:
            channel_entity = await client.get_entity(int(chat_id))
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞: {channel_entity.title} (id: {channel_entity.id})")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message = await client.get_messages(channel_entity, ids=message_id)
            if not message:
                logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        metrics = {
            'views': getattr(message, 'views', 0) or 0,
            'reactions': 0,
            'forwards': getattr(message, 'forwards', 0) or 0,
            'replies': getattr(message, 'replies', 0) if hasattr(message, 'replies') else 0,
            'post_author': getattr(message, 'post_author', None),
            'date': message.date.isoformat() if hasattr(message, 'date') else None,
        }

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π
        try:
            if hasattr(message, 'reactions') and message.reactions:
                reactions_data = []
                total_reactions = 0
                if hasattr(message.reactions, 'results'):
                    for reaction in message.reactions.results:
                        try:
                            reaction_count = getattr(reaction, 'count', 0) or 0
                            total_reactions += reaction_count
                            reactions_data.append({
                                'emoji': str(getattr(reaction, 'reaction', '?')),
                                'count': reaction_count
                            })
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
                            continue
                    
                metrics['reactions'] = total_reactions
                metrics['reactions_details'] = reactions_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π: {e}")
            # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        logger.info(f"–°–æ–±—Ä–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id}:")
        logger.info(f"- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics['views']}")
        logger.info(f"- –†–µ–∞–∫—Ü–∏–∏: {metrics['reactions']}")
        logger.info(f"- –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {metrics['forwards']}")
        logger.info(f"- –û—Ç–≤–µ—Ç—ã: {metrics['replies']}")
        if metrics.get('reactions_details'):
            logger.info("- –î–µ—Ç–∞–ª–∏ —Ä–µ–∞–∫—Ü–∏–π:")
            for reaction in metrics['reactions_details']:
                logger.info(f"  ‚Ä¢ {reaction['emoji']}: {reaction['count']}")

        return metrics

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ –ø–æ—Å—Ç–∞ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}", exc_info=True)
        return None

async def check_post_metrics_later(
    chat_id: str,
    message_id: int,
    delay_seconds: int
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç—Ä–∏–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        if chat_id not in channels:
            logger.error(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        check_time = datetime.now() + timedelta(seconds=delay_seconds)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if chat_id not in pending_checks:
            pending_checks[chat_id] = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
        if message_id in pending_checks[chat_id]:
            logger.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
        pending_checks[chat_id][message_id] = {
            'check_time': check_time,
            'added_time': datetime.now(),
            'retries': 0  # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        }
        
        logger.info(f"–ü–æ—Å—Ç {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç—Ä–∏–∫")
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_time}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}")

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
async def check_pending_metrics(force: bool = False) -> List[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    results = []
    current_time = datetime.now()
    
    try:
        for chat_id in list(pending_checks.keys()):
            if chat_id not in channels:
                logger.error(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏")
                continue
                
            for message_id in list(pending_checks[chat_id].keys()):
                try:
                    check_data = pending_checks[chat_id][message_id]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                    if check_data.get('retries', 0) >= 3:
                        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}")
                        del pending_checks[chat_id][message_id]
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ —ç—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    if not force and current_time < check_data['check_time']:
                        continue
                        
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    try:
                        channel_info = await bot.get_chat(chat_id)
                        subscribers = channels[chat_id].get('subscribers', 0)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}")
                        check_data['retries'] = check_data.get('retries', 0) + 1
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    metrics = await get_post_metrics(chat_id, message_id)
                    if not metrics:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}")
                        check_data['retries'] = check_data.get('retries', 0) + 1
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                    post_key = f"{chat_id}_{message_id}"
                    if post_key not in history:
                        logger.error(f"–ü–æ—Å—Ç {post_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏")
                        del pending_checks[chat_id][message_id]
                        continue
                    
                    post_data = history[post_key]
                    
                    try:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç—Ä–∏–∫
                        metrics_result = await check_post_metrics(
                            views=metrics['views'],
                            reactions=metrics['reactions'],
                            forwards=metrics['forwards'],
                            subscribers=subscribers,
                            channel_name=channel_info.title,
                            message_id=message_id,
                            message_text=post_data.get('text', ''),
                            message_url=post_data.get('url', ''),
                            settings=channels[chat_id]
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                        post_data.update({
                            'metrics': metrics,
                            'metrics_check_time': current_time.isoformat(),
                            'metrics_passed': metrics_result["passed"],
                            'metrics_details': metrics_result["details"],
                            'metrics_failed': not metrics_result["passed"]
                        })
                        history[post_key] = post_data
                        save_history()
                        
                        if not metrics_result["passed"]:
                            metrics_details = metrics_result["details"]["metrics"]
                            result_message = (
                                f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å—Ç–µ!\n\n"
                                f"–ö–∞–Ω–∞–ª: {channel_info.title}\n"
                                f"üîó {post_data['url']}\n\n"
                                f"üìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:\n"
                                f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics_details['views']['current']}/{metrics_details['views']['required']} "
                                f"({metrics_details['views']['percent']:.1f}%) "
                                f"{'‚úÖ' if metrics_details['views']['passed'] else '‚ùå'}\n"
                                
                                f"üëç –†–µ–∞–∫—Ü–∏–∏: {metrics_details['reactions']['current']}/{metrics_details['reactions']['required']} "
                                f"({metrics_details['reactions']['percent']:.1f}%) "
                                f"{'‚úÖ' if metrics_details['reactions']['passed'] else '‚ùå'}\n"
                                
                                f"‚ÜóÔ∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {metrics_details['forwards']['current']}/{metrics_details['forwards']['required']} "
                                f"({metrics_details['forwards']['percent']:.1f}%) "
                                f"{'‚úÖ' if metrics_details['forwards']['passed'] else '‚ùå'}\n"
                            )
                            
                            if metrics_result["details"]["issues"]:
                                result_message += "\n‚ùóÔ∏è –ü—Ä–æ–±–ª–µ–º—ã:\n"
                                for issue in metrics_result["details"]["issues"]:
                                    result_message += f"‚Ä¢ {issue}\n"
                                    
                            results.append({
                                'channel_name': channel_info.title,
                                'message': result_message
                            })
                        
                        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                        del pending_checks[chat_id][message_id]
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç—Ä–∏–∫ –ø–æ—Å—Ç–∞ {message_id}: {e}")
                        check_data['retries'] = check_data.get('retries', 0) + 1
                        continue
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ {message_id}: {e}")
                    continue
                    
            # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞–Ω–∞–ª—ã
            if not pending_checks[chat_id]:
                del pending_checks[chat_id]
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
        
    return results

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
@dp.message(Command("check_pending"))
@dp.message(Text(text="üì¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ"))
async def check_pending_command(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        total_pending = sum(len(posts) for posts in pending_checks.values())
        
        if total_pending == 0:
            await message.reply("üì≠ –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –º–µ—Ç—Ä–∏–∫.")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_message = await message.reply(
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É {total_pending} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        results = await check_pending_metrics(force=True)
        
        if not results:
            await status_message.edit_text(
                f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–í—Å–µ {total_pending} –ø–æ—Å—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."
            )
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        summary = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
        summary += f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_pending}\n"
        summary += f"–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: {len(results)}\n\n"
        
        await status_message.edit_text(summary)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
        for result in results:
            await message.reply(result['message'])
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫.")

async def notify_admins(channel_data, message, error_type=None, error_details=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –∫–∞–Ω–∞–ª–∞"""
    try:
        admin_ids = channel_data.get('admins', [])
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º: {admin_ids}")
        
        if not admin_ids:
            logger.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if isinstance(message, str):
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–µ—Ç—Ä–∏–∫–∞—Ö)
            message_text = message
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –¥—Ä—É–≥–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            message_text = (
                f"üì¢ {error_type}\n\n"
                f"–ö–∞–Ω–∞–ª: {channel_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–ü–æ—Å—Ç: {message.message_id}\n"
            )
            
            if error_details:
                message_text += f"\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {error_details}\n"
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            post_link = f"https://t.me/c/{str(message.chat.id)[4:]}/{message.message_id}"
            message_text += f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: {post_link}"
        
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤: {message_text}")

        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, message_text, parse_mode=parse_mode)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def update_channel_info(chat_id: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(chat_id)
        subscribers_count = await bot.get_chat_member_count(chat_id)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º GetChatMemberCount –≤ int
        subscribers_count = int(subscribers_count)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {chat.title}, –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ channels
        if chat_id not in channels:
            channels[chat_id] = {
                "title": chat.title,
                "subscribers": subscribers_count,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ int
                "required_views": 0,
                "required_reactions": 0,
                "timezone": 0,
                "is_news": False,
                "admins": [],
                "posts": [],
                "chat_id": chat.id
            }
        else:
            channels[chat_id].update({
                "title": chat.title,
                "subscribers": subscribers_count,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ int
                "chat_id": chat.id
            })
            
        save_channels()
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ {chat_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}")


# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
def get_bot():
    return bot

set_bot_getter(get_bot)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è KPI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(Command("kpi"))
@dp.message(Text(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ KPI"))
async def kpi_stats_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç KPI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
    try:
        stats_text = "üìä KPI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        
        for chat_id, data in channels.items():
            try:
                channel_info = await bot.get_chat(chat_id)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                channel_posts = {k: v for k, v in history.items() if k.startswith(f"{chat_id}_")}
                total_posts = len(channel_posts)
                failed_posts = len([k for k, v in channel_posts.items() 
                                  if v.get("has_errors", False)])
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                success_rate = ((total_posts - failed_posts) / total_posts * 100 
                              if total_posts > 0 else 0)
                
                stats_text += (
                    f"üìå {channel_info.title}\n"
                    f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n"
                    f"–£—Å–ø–µ—à–Ω—ã—Ö: {total_posts - failed_posts}\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n\n"
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}")
                stats_text += f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}\n\n"
        
        await message.reply(stats_text)
        
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
        logger.error(error_message)
        await message.reply(error_message)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ç—Ä–∏–∫
@dp.callback_query(lambda c: c.data and c.data.startswith("metrics_settings:"))
async def metrics_settings(callback_query: types.CallbackQuery):
    try:
        channel_id = callback_query.data.split(":")[1]
        channel_data = channels[channel_id]
        metrics = channel_data.get('metrics', {
            'views_percent': CONFIG['POST_SETTINGS']['MIN_VIEWS_PERCENT'],
            'reactions_percent': CONFIG['POST_SETTINGS']['MIN_REACTIONS_PERCENT'],
            'forwards_percent': CONFIG['POST_SETTINGS']['MIN_FORWARDS_PERCENT']
        })

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics['views_percent']}%",
                callback_data=f"set_metric:views:{channel_id}"
            )],
            [InlineKeyboardButton(
                text=f"üëç –†–µ–∞–∫—Ü–∏–∏: {metrics['reactions_percent']}%",
                callback_data=f"set_metric:reactions:{channel_id}"
            )],
            [InlineKeyboardButton(
                text=f"‚ÜóÔ∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {metrics['forwards_percent']}%",
                callback_data=f"set_metric:forwards:{channel_id}"
            )],
            [InlineKeyboardButton(
                text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                callback_data=f"reset_metrics:{channel_id}"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"manage_channel:{channel_id}"
            )]
        ])

        await callback_query.message.edit_text(
            f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrics['views_percent']}% –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            f"üëç –†–µ–∞–∫—Ü–∏–∏: {metrics['reactions_percent']}% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
            f"‚ÜóÔ∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {metrics['forwards_percent']}% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–µ—Ç—Ä–∏–∫: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–µ—Ç—Ä–∏–∫", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("set_metric:"))
async def set_metric_value(callback_query: types.CallbackQuery):
    try:
        _, metric_type, channel_id = callback_query.data.split(":")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        percents = [5, 10, 15, 20, 25, 30, 40, 50]
        buttons = []
        row = []
        
        for percent in percents:
            row.append(InlineKeyboardButton(
                text=f"{percent}%",
                callback_data=f"apply_metric:{metric_type}:{channel_id}:{percent}"
            ))
            if len(row) == 4:  # –ü–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                buttons.append(row)
                row = []
        
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            buttons.append(row)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        buttons.append([InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"metrics_settings:{channel_id}"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        metric_names = {
            'views': '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤',
            'reactions': '—Ä–µ–∞–∫—Ü–∏–π',
            'forwards': '–ø–µ—Ä–µ—Å—ã–ª–æ–∫'
        }
        
        await callback_query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è {metric_names[metric_type]}:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("apply_metric:"))
async def apply_metric_value(callback_query: types.CallbackQuery):
    try:
        _, metric_type, channel_id, percent = callback_query.data.split(":")
        percent = float(percent)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'metrics' not in channels[channel_id]:
            channels[channel_id]['metrics'] = {
                'views_percent': CONFIG['POST_SETTINGS']['MIN_VIEWS_PERCENT'],
                'reactions_percent': CONFIG['POST_SETTINGS']['MIN_REACTIONS_PERCENT'],
                'forwards_percent': CONFIG['POST_SETTINGS']['MIN_FORWARDS_PERCENT']
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        metric_mapping = {
            'views': 'views_percent',
            'reactions': 'reactions_percent',
            'forwards': 'forwards_percent'
        }
        
        channels[channel_id]['metrics'][metric_mapping[metric_type]] = percent
        save_channels()
        
        await callback_query.answer(f"–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {percent}%")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –º–µ—Ç—Ä–∏–∫
        await metrics_settings(callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@dp.callback_query(lambda c: c.data and c.data.startswith("reset_metrics:"))
async def reset_metrics(callback_query: types.CallbackQuery):
    try:
        channel_id = callback_query.data.split(":")[1]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        channels[channel_id]['metrics'] = {
            'views_percent': CONFIG['POST_SETTINGS']['MIN_VIEWS_PERCENT'],
            'reactions_percent': CONFIG['POST_SETTINGS']['MIN_REACTIONS_PERCENT'],
            'forwards_percent': CONFIG['POST_SETTINGS']['MIN_FORWARDS_PERCENT']
        }
        save_channels()
        
        await callback_query.answer("–ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –º–µ—Ç—Ä–∏–∫
        await metrics_settings(callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –º–µ—Ç—Ä–∏–∫: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –º–µ—Ç—Ä–∏–∫", show_alert=True)

if __name__ == "__main__":
    asyncio.run(main())
