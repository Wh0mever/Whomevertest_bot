import logging
from .config import CONFIG

logger = logging.getLogger(__name__)

async def notify_admins(channel_data, message_text, bot, super_admin_id, original_message=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –∫–∞–Ω–∞–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if not CONFIG["NOTIFICATIONS"]["NOTIFY_ON_ERRORS"]:
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return
            
        admin_ids = channel_data.get('admins', [])
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º: {admin_ids}")
        
        if not admin_ids:
            logger.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –∫–∞–Ω–∞–ª–∞
        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, message_text)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        # 1. –û–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞
        # 2. –í–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SEND_TO_OWNER
        if (super_admin_id not in admin_ids and 
            CONFIG["NOTIFICATIONS"]["SEND_TO_OWNER"]):
            try:
                super_admin_message = (
                    f"[–ö–æ–ø–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è]\n"
                    f"üë§ –ö–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è: {', '.join(str(admin) for admin in admin_ids)}\n\n"
                    f"{message_text}"
                )
                await bot.send_message(super_admin_id, super_admin_message)
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}") 